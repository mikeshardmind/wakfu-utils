[tool.pyright]
include = ["async_utils"]
exclude = [
    "**/__pycache__",
    "build",
    "dist",
    "docs",
]

pythonVersion = "3.11"
typeCheckingMode = "strict"
pythonPlatform = "All"
reportImportCycles = "error"
reportPropertyTypeMismatch = "error"
reportShadowedImports = "error"
reportUninitializedInstanceVariable = "error"
reportUnnecessaryTypeIgnoreComment = "warning"


[tool.ruff]

line-length = 90
target-version = "py311"
preview = true

[tool.ruff.format]
line-ending = "lf"


[tool.ruff.lint]
select = [
    "A", "ANN", "ASYNC", "B", "BLE", "C4", "COM", "DTZ", "E",
    "EM", "F", "FA", "FBT", "FURB", "G", "I", "ICN", "INP", "ISC", "LOG", "NPY",
    "PD", "PERF", "PGH", "PIE", "PLC", "PLE", "PLR", "PLW", "PTH", "PYI",
    "Q", "Q003", "RET", "RSE", "RUF", "S", "SIM", "SLOT", "T20", "TC", "TID",
    "TRY", "UP", "W", "YTT"
]

typing-modules = ["async_utils._typings"]

ignore = [
    "LOG015",
    "E731",
    "PLR1702",
    "PLR0911",
    "PLR0914",
    "PLC2701",
    "ANN202", # implied return fine sometimes
    "ANN401",  # Any is the correct type in some cases
    "ASYNC116", # Long sleeps are fine
    "B901", # I'm aware of how generators as coroutines work
    "C90",  # mccabe complexity memes
    "COM812", # ruff format suggested
    "D100", # no, module level docs aren't always neededd
    "D105", # documenting magic methods is often dumb.
    "D107", # __init__ is the wrong place to doc this.
    "E501", # ruff format suggested
    "FBT003", # Wrong end to enforce this on.
    "G002",  # erroneous issue with %-logging when logging can be confiured for % logging
    "ISC001", # ruff format suggested
    "PLC0105",  # no, I don't like co naming style for typevars
    "PLC0415", # ruff gets this wrong, import needs to be not at top of file in some cases
    "PLR0912", # too many branches
    "PLR0913", # number of function arguments
    "PLR0915",  # too many statements.... in an async entrypoint handling graceful shutdown...
    "PLR0917",  # too many positional arguments
    "PLR2004",  # Magic value comparison, may remove later
    "RUF001",  # ambiguous characters not something I want to enforce here.
    "RUF029",  # no, don't try andd tell me I'm wrong for async def when something is for an interface.
    "S101",  # use of assert here is a known quantity, blame typing memes
    "S311",  # Yes, I know that standard pseudo-random generators are not suitable for cryptographic purposes
    "SIM105",  # supressable exception, I'm not paying the overhead of contextlib.supress for stylistic choices.
    "TC001", # I prefer to avoid if TYPE_CHECKING
    "TC002", # I prefer to avoid if TYPE_CHECKING
    "TC003", # I prefer to avoid if TYPE_CHECKING
    "UP007", # "Use | For Union" doesn't account for typevar tuple unpacking.
    "UP031", # No, I like % formatting more for some things...
    "UP038", # isinstance on union types... perf + type construct symmetry issues.
    # As PYI058 modifies return values to be more narrow than they actually are
    "PYI058", # This opinionated "fix" causes incompatabilties with things expecting a generator.
]
unfixable = [
    "E501",  # line length handled in other ways by ruff format
    "ERA",  # Don't delete commented out code
]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.flake8-comprehensions]
allow-dict-calls-with-keyword-arguments = true

[tool.ruff.lint.flake8-import-conventions.aliases]
"concurrent.futures" = "cf"

[tool.ruff.lint.flake8-tidy-imports.banned-api]
# https://discuss.python.org/t/problems-with-typeis/55410/6
# https://discuss.python.org/t/problems-with-typeis/55410/46
# Until what can go into a TypeIs/TypeGuard changes, these are just dangerous.

"typing.TypeIs".msg = "TypeIs is fundamentally unsafe, even when using it as described to be safe"
"typing.TypeGuard".msg = "TypeGuard is fundamentally unsafe"
"typing_extensions.TypeIs".msg = "TypeIs is fundamentally unsafe, even when using it as described to be safe"
"typing_extensions.TypeGuard".msg = "TypeGuard is fundamentally unsafe"
"typing.runtime_checkable".msg = "Runtime checkable is fundamentally unsafe."
"typing_extensions.runtime_checkable".msg = "Runtime checkable is fundamentally unsafe."


[tool.ruff.lint.extend-per-file-ignores]
"wakautosolver/b2048/enc_table.py" = ["RUF001"]
"wakautosolver/b2048/dec_table.py" = ["RUF001"]
"wakautosolver/__init__.py" = ["F401"]  # unused import in __init__
"buildcodes_example.py" = ["RUF003", "T201"]

[project]
name="wakautosolver"
license = "MPL-2.0"
requires-python = ">=3.10"
authors = [{ name = "Michael Hall", email = "michael@michaelhall.tech" }]
readme = "readme.md"
dynamic = ["version"]
dependencies = []

[project.urls]
Homepage = "https://github.com/mikeshardmind/wakfu-utils"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.version]
path = "wakautosolver/__init__.py"

[tool.hatch.build]
artifacts = ["*.bz2"]

[tool.hatch.build.targets.wheel]
include = [
    "/wakautosolver",
    "/LICENSE",
]